/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.exef.crypto.UI;

import com.exef.crypto.CryptoProvider;
import com.exef.crypto.CryptoProviderBuilder;
import com.exef.crypto.KeyProvider;
import com.exef.utils.Logger;
import java.io.File;
import java.lang.reflect.Field;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Filip
 */
public class MainWindow extends javax.swing.JFrame {

    public static MainWindow create() {
        return new MainWindow();
    }

    /**
     * Creates new form MainWindow
     */
    private MainWindow() {
        initComponents();
        decryptPanel.setVisible(false);
        Logger logger = Logger.getInstance();
        logger.setOutput(jTextArea2);
        try {
            Field field = Class.forName("javax.crypto.JceSecurity").
                    getDeclaredField("isRestricted");
            field.setAccessible(true);
            field.set(null, java.lang.Boolean.FALSE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jMenuItem2 = new javax.swing.JMenuItem();
        decryptPanel = new javax.swing.JPanel();
        fileChooserPanel3 = new javax.swing.JPanel();
        chooseFileButton3 = new javax.swing.JButton();
        decryptChoosedFilePathTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        decryptPasswordField = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        decryptButton = new javax.swing.JButton();
        cryptPanel = new javax.swing.JPanel();
        fileChooserPanel = new javax.swing.JPanel();
        chooseFileButton = new javax.swing.JButton();
        choosedFilePathTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        marsConfigurationPanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        KeyLength = new javax.swing.JLabel();
        Mode = new javax.swing.JLabel();
        Password1 = new javax.swing.JLabel();
        Password2 = new javax.swing.JLabel();
        passwordField1 = new javax.swing.JPasswordField();
        passwordField2 = new javax.swing.JPasswordField();
        cipherFileButton = new javax.swing.JButton();
        modeComboBox = new javax.swing.JComboBox();
        SubblockSize = new javax.swing.JLabel();
        subBlockSizeComboBox = new javax.swing.JComboBox();
        keySizeComboBox = new javax.swing.JComboBox();
        BlockSize = new javax.swing.JLabel();
        blockSizeComboBox = new javax.swing.JComboBox();
        outputPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\"));

            jMenuItem2.setText("jMenuItem2");

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setResizable(false);

            decryptPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            fileChooserPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            chooseFileButton3.setText("Wybierz plik");
            chooseFileButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    chooseFileButton3ActionPerformed(evt);
                }
            });

            decryptChoosedFilePathTextField.setFocusable(false);

            jLabel5.setText("Plik do odszyfrowania:");

            javax.swing.GroupLayout fileChooserPanel3Layout = new javax.swing.GroupLayout(fileChooserPanel3);
            fileChooserPanel3.setLayout(fileChooserPanel3Layout);
            fileChooserPanel3Layout.setHorizontalGroup(
                fileChooserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(fileChooserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fileChooserPanel3Layout.createSequentialGroup()
                            .addComponent(decryptChoosedFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(chooseFileButton3))
                        .addComponent(jLabel5))
                    .addContainerGap(17, Short.MAX_VALUE))
            );
            fileChooserPanel3Layout.setVerticalGroup(
                fileChooserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanel3Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(fileChooserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(decryptChoosedFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseFileButton3))
                    .addGap(259, 259, 259))
            );

            jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            jLabel6.setText("Ustawienia odszyfrowania");

            jLabel7.setText("Has≈Ço:");

            decryptButton.setText("Odszyfruj plik");
            decryptButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    decryptButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(decryptPasswordField)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decryptButton)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel6)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(decryptPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                    .addComponent(decryptButton)
                    .addContainerGap())
            );

            javax.swing.GroupLayout decryptPanelLayout = new javax.swing.GroupLayout(decryptPanel);
            decryptPanel.setLayout(decryptPanelLayout);
            decryptPanelLayout.setHorizontalGroup(
                decryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptPanelLayout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addGroup(decryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileChooserPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            decryptPanelLayout.setVerticalGroup(
                decryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(decryptPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileChooserPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );

            cryptPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            fileChooserPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            chooseFileButton.setText("Wybierz plik");
            chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    chooseFileButtonActionPerformed(evt);
                }
            });

            choosedFilePathTextField.setFocusable(false);

            jLabel1.setText("Plik do szyfrowania:");

            javax.swing.GroupLayout fileChooserPanelLayout = new javax.swing.GroupLayout(fileChooserPanel);
            fileChooserPanel.setLayout(fileChooserPanelLayout);
            fileChooserPanelLayout.setHorizontalGroup(
                fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fileChooserPanelLayout.createSequentialGroup()
                            .addComponent(choosedFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(chooseFileButton))
                        .addComponent(jLabel1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            fileChooserPanelLayout.setVerticalGroup(
                fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(choosedFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseFileButton))
                    .addGap(259, 259, 259))
            );

            marsConfigurationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            Title.setText("Mars - ustawienia szyfrowania");

            KeyLength.setText("D≈Çugo≈õƒá klucza");

            Mode.setText("Tryb");

            Password1.setText("Has≈Ço");

            Password2.setText("Powt√≥rz has≈Ço");

            cipherFileButton.setText("Szyfruj plik...");
            cipherFileButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cipherFileButtonActionPerformed(evt);
                }
            });

            modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ECB", "CBC", "CFB", "OFB" }));

            SubblockSize.setText("Dlugo≈õƒá podbloku");

            subBlockSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "32" }));

            keySizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "128", "192", "256" }));

            BlockSize.setText("Dlugo≈õƒá bloku");

            blockSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "128" }));

            javax.swing.GroupLayout marsConfigurationPanelLayout = new javax.swing.GroupLayout(marsConfigurationPanel);
            marsConfigurationPanel.setLayout(marsConfigurationPanelLayout);
            marsConfigurationPanelLayout.setHorizontalGroup(
                marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(marsConfigurationPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, marsConfigurationPanelLayout.createSequentialGroup()
                            .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(marsConfigurationPanelLayout.createSequentialGroup()
                                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Password1)
                                        .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Password2)
                                        .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(marsConfigurationPanelLayout.createSequentialGroup()
                                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(KeyLength)
                                        .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(keySizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Title))
                                        .addGroup(marsConfigurationPanelLayout.createSequentialGroup()
                                            .addComponent(BlockSize)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(blockSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(81, 81, 81)
                                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Mode)
                                        .addComponent(SubblockSize))))
                            .addGap(20, 20, 20)
                            .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(subBlockSizeComboBox, 0, 52, Short.MAX_VALUE)
                                .addComponent(modeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(53, 53, 53))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, marsConfigurationPanelLayout.createSequentialGroup()
                            .addComponent(cipherFileButton)
                            .addGap(34, 34, 34))))
            );
            marsConfigurationPanelLayout.setVerticalGroup(
                marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(marsConfigurationPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Title)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(KeyLength)
                        .addComponent(Mode)
                        .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(keySizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BlockSize, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blockSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SubblockSize, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subBlockSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(28, 28, 28)
                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Password1)
                        .addComponent(Password2))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(marsConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cipherFileButton)
                    .addContainerGap(16, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout cryptPanelLayout = new javax.swing.GroupLayout(cryptPanel);
            cryptPanel.setLayout(cryptPanelLayout);
            cryptPanelLayout.setHorizontalGroup(
                cryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cryptPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(cryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(marsConfigurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addContainerGap(11, Short.MAX_VALUE))
            );
            cryptPanelLayout.setVerticalGroup(
                cryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cryptPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(marsConfigurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33))
            );

            outputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            jLabel3.setText("Output");

            jTextArea2.setColumns(20);
            jTextArea2.setRows(5);
            jTextArea2.setFocusable(false);
            jScrollPane2.setViewportView(jTextArea2);

            javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
            outputPanel.setLayout(outputPanelLayout);
            outputPanelLayout.setHorizontalGroup(
                outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(outputPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2)
                        .addGroup(outputPanelLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            outputPanelLayout.setVerticalGroup(
                outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(outputPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addContainerGap())
            );

            jMenu1.setText("Plik");
            jMenu1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenu1ActionPerformed(evt);
                }
            });

            jMenuItem1.setText("Szyfruj");
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem1ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem1);

            jMenuItem3.setText("Deszyfruj");
            jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem3ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem3);

            jMenuBar1.add(jMenu1);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cryptPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(decryptPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap()))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cryptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(decryptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(193, Short.MAX_VALUE)))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            choosedFilePathTextField.setText(file.getAbsolutePath());
            Logger.addMessage("File choosen: " + file.getAbsolutePath());

        } else {
            Logger.addMessage("File access cancelled by user.");
        }

    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void cipherFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherFileButtonActionPerformed
        if (isPasswordsValid()) {
            if (continueAcceptWindow("Ta operacja zajmie pewnƒÖ ilo≈õƒá czasu. Czy napewno chcesz kontynuowaƒá?")) {
                lockInterface();
                SwingWorker worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        builder.createCryptoProvider();
                        builder.setMode(modeComboBox.getSelectedItem().toString());
                        builder.setKeySize(keySizeComboBox.getSelectedItem().toString());
                        builder.setSubBlockSize(subBlockSizeComboBox.getSelectedItem().toString());
                        KeyProvider keyProvider = new KeyProvider(passwordField1.getText(),
                                Integer.parseInt(keySizeComboBox.getSelectedItem().toString()));
                        builder.setKeyProvider(keyProvider);
                        builder.setPath(choosedFilePathTextField.getText());
                        CryptoProvider crypto = builder.getCryptoProvider();
                        crypto.encryptFile();
                        return null;
                    }

                    @Override
                    public void done() {
                        showDoneWindow();
                        unlockInterface();
                    }
                };
                worker.execute();
            }
        } else {
            Logger.addMessage("Passwords aren't valid.");
        }
    }//GEN-LAST:event_cipherFileButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        cryptPanel.setVisible(false);
        decryptPanel.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        cryptPanel.setVisible(true);
        decryptPanel.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void chooseFileButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButton3ActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            decryptChoosedFilePathTextField.setText(file.getAbsolutePath());
            Logger.addMessage("File choosed: " + file.getAbsolutePath());

        } else {
            Logger.addMessage("File access cancelled by user.");
        }
    }//GEN-LAST:event_chooseFileButton3ActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        lockInterface();
        if (continueAcceptWindow("Ta operacja zajmie pewnƒÖ ilo≈õƒá czasu. Czy napewno chcesz kontynuowaƒá?")) {
            SwingWorker worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    builder.createCryptoProvider();
                    KeyProvider keyProvider = new KeyProvider(decryptPasswordField.getText());
                    builder.setKeyProvider(keyProvider);
                    builder.setPath(decryptChoosedFilePathTextField.getText());
                    CryptoProvider crypto = builder.getCryptoProvider();
                    crypto.decryptFile();
                    return null;
                }

                @Override
                public void done() {
                    showDoneWindow();
                    unlockInterface();
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow.create().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BlockSize;
    private javax.swing.JLabel KeyLength;
    private javax.swing.JLabel Mode;
    private javax.swing.JLabel Password1;
    private javax.swing.JLabel Password2;
    private javax.swing.JLabel SubblockSize;
    private javax.swing.JLabel Title;
    private javax.swing.JComboBox blockSizeComboBox;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JButton chooseFileButton3;
    private javax.swing.JTextField choosedFilePathTextField;
    private javax.swing.JButton cipherFileButton;
    private javax.swing.JPanel cryptPanel;
    private javax.swing.JButton decryptButton;
    private javax.swing.JTextField decryptChoosedFilePathTextField;
    private javax.swing.JPanel decryptPanel;
    private javax.swing.JPasswordField decryptPasswordField;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel fileChooserPanel;
    private javax.swing.JPanel fileChooserPanel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JComboBox keySizeComboBox;
    private javax.swing.JPanel marsConfigurationPanel;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JPasswordField passwordField1;
    private javax.swing.JPasswordField passwordField2;
    private javax.swing.JComboBox subBlockSizeComboBox;
    // End of variables declaration//GEN-END:variables
    private CryptoProviderBuilder builder = new CryptoProviderBuilder();

    private boolean isPasswordsValid() {
        if (passwordField1.getText().equals(passwordField2.getText())) {
            if (!passwordField1.getText().equals("")) {
                return true;
            }
        }
        return false;
    }

    private void lockInterface() {
        this.cipherFileButton.setEnabled(false);
        this.decryptButton.setEnabled(false);
    }

    private void unlockInterface() {
        this.cipherFileButton.setEnabled(true);
        this.decryptButton.setEnabled(true);
    }

    private boolean continueAcceptWindow(String message) {
        Object[] options = {"Tak", "Anuluj"};
        int a = JOptionPane.showOptionDialog(null, message, "Info",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
                null, options, options[0]);
        if (a == 0) {
            return true;
        } else {
            return false;
        }
    }

    private void showDoneWindow() {
        JOptionPane.showMessageDialog(null, "Zakonczono!", "Zakonczono", JOptionPane.INFORMATION_MESSAGE);
    }
}
